// LibraryManagementSystem.java
package chapter1;

import java.util.*;

class Book {
    int id;
    String title;
    String author;
    boolean isIssued;

    Book(int id, String title, String author) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.isIssued = false;
    }

    public java.lang.String toString() {
        return id + " | " + title + " | " + author + " | " + (isIssued ? "Issued" : "Available");
    }
}

class Member {
    int id;
    String name;
    List<Book> issuedBooks;

    Member(int id, String name) {
        this.id = id;
        this.name = name;
        this.issuedBooks = new ArrayList<>();
    }

    public java.lang.String toString() {
        return id + " | " + name + " | Books Issued: " + issuedBooks.size();
    }
}

public class LibraryManagementSystem {
    static List<Book> books = new ArrayList<>();
    static List<Member> members = new ArrayList<>();
    static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            System.out.println("\n=== Library Management System ===");
            System.out.println("1. Add Book");
            System.out.println("2. Register Member");
            System.out.println("3. Issue Book");
            System.out.println("4. Return Book");
            System.out.println("5. View All Books");
            System.out.println("6. View All Members");
            System.out.println("7. Exit");
            System.out.print("Choose option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // consume newline
            switch (choice) {
                case 1 -> addBook();
                case 2 -> registerMember();
                case 3 -> issueBook();
                case 4 -> returnBook();
                case 5 -> viewBooks();
                case 6 -> viewMembers();
                case 7 -> {
                    System.out.println("Exiting system. Goodbye!");
                    System.exit(0);
                }
                default -> System.out.println("Invalid choice!");
            }
        }
    }

    static void addBook() {
        System.out.print("Enter book ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // consume newline
        if (findBook(id) != null) {
            System.out.println("Book ID already exists.");
            return;
        }
        System.out.print("Enter title: ");
        String title = scanner.nextLine();
        System.out.print("Enter author: ");
        String author = scanner.nextLine();
        books.add(new Book(id, title, author));
        System.out.println("Book added successfully.");
    }

    static void registerMember() {
        System.out.print("Enter member ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // consume newline
        if (findMember(id) != null) {
            System.out.println("Member ID already exists.");
            return;
        }
        System.out.print("Enter member name: ");
        String name = scanner.nextLine();
        members.add(new Member(id, name));
        System.out.println("Member registered successfully.");
    }

    static void issueBook() {
        System.out.print("Enter book ID: ");
        int bookId = scanner.nextInt();
        System.out.print("Enter member ID: ");
        int memberId = scanner.nextInt();
        Book book = findBook(bookId);
        Member member = findMember(memberId);
        if (book == null || member == null) {
            System.out.println("Invalid Book ID or Member ID.");
            return;
        }
        if (book.isIssued) {
            System.out.println("Book is already issued.");
            return;
        }
        book.isIssued = true;
        member.issuedBooks.add(book);
        System.out.println("Book issued to member.");
    }

    static void returnBook() {
        System.out.print("Enter book ID: ");
        int bookId = scanner.nextInt();
        Book book = findBook(bookId);
        if (book == null || !book.isIssued) {
            System.out.println("Return failed: Book not found or not issued.");
            return;
        }
        book.isIssued = false;
        for (Member member : members) {
            boolean removed = member.issuedBooks.removeIf(b -> b.id == bookId);
            if (removed) {
                System.out.println("Book returned successfully.");
                return;
            }
        }
        System.out.println("Book not found in issued records.");
    }

    static void viewBooks() {
        System.out.println("\nAll Books:");
        if (books.isEmpty()) {
            System.out.println("No books found.");
        } else {
            for (Book b : books) {
                System.out.println(b);
            }
        }
    }

    static void viewMembers() {
        System.out.println("\nAll Members:");
        if (members.isEmpty()) {
            System.out.println("No members found.");
        } else {
            for (Member m : members) {
                System.out.println(m);
            }
        }
    }

    static Book findBook(int id) {
        return books.stream().filter(b -> b.id == id).findFirst().orElse(null);
    }

    static Member findMember(int id) {
        return members.stream().filter(m -> m.id == id).findFirst().orElse(null);
    }
}